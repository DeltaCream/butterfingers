use std::io::{self, Write};
use libfprint_rs::FpContext;

#[tokio::main]
async fn main() {
    //Get FpContext to get devices
    let context = FpContext::new();
    //Use FpContext to get devices (returns a vector/array of devices)
    let devices = context.devices();
    //Get the first device (which, in this case, is the only device, and it is the fingerprint scanner)
    let fp_scanner = devices.first().expect("Devices could not be retrieved. Please try plugging in your fingerprint scanner.");

    let mut first_iteration = true;
    'outer: loop {
        if first_iteration {
            first_iteration = false;
        } else {
            'inner : loop {
                println!("Do you want to continue with the program? (y/n)");
                let mut cont = String::new();
                io::stdin().read_line(&mut cont).unwrap();
                match cont.trim() {
                    "y" => break 'inner,
                    "n" => break 'outer,
                    _ => {
                        println!("Invalid input!");
                        continue 'inner
                    },
                }
            }
        }

        print!("Please input 1 to enroll or 2 to verify: ");
        io::stdout().flush().unwrap(); //flushes out everything stored in stdout to receive input with no problems
        let mut input = String::new();
        io::stdin().read_line(&mut input).unwrap(); //read input and store in variable input of String type

        match input.trim() {
            "1" => {
                println!("Starting to enroll fingerprint...");
                butterfingers::enroll(fp_scanner).await;
            },
            "2" => {
                println!("Starting to take attendance with fingerprint...");
                butterfingers::verify(fp_scanner).await;
            },
            "3" => {
                println!("Managing fingerprints...");
                //butterfingers::manage(fp_scanner).await;
            }
            _ => {
                println!("Invalid input!");
                continue;
            }
        }
    }
}